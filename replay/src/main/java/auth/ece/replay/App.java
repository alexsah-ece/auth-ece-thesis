/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package auth.ece.replay;

import auth.ece.replay.model.DatasetMetric;
import auth.ece.replay.processor.AMPds2Processor;
import auth.ece.replay.processor.DatasetProcessor;
import auth.ece.replay.processor.EdfProcessor;
import auth.ece.replay.publisher.KafkaPublisher;
import auth.ece.replay.publisher.MetricPublisher;
import auth.ece.replay.reader.AMPds2Reader;
import auth.ece.replay.reader.DatasetReader;
import auth.ece.replay.reader.EdfReader;
import auth.ece.common.model.MetricType;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.cli.*;

import java.io.IOException;
import java.io.Reader;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

@Log4j2
public class App {

    private static final String RATE_OPTION = "rate";
    private static final String DAY_OFFSET_OPTION = "dayOffset";

    private static final String HOUSEHOLD_ID_START_OPTION = "householdIdStart";

    private static final String HOUSEHOLD_ID_END_OPTION = "householdIdEnd";

    private static final String METER_TYPE_OPTION = "meterType";

    private static final String MESSAGE_COUNT_OPTION = "messageCount";

    private static double PUBLISH_RATE;
    private static int DAY_OFFSET;

    private static int HOUSEHOLD_ID_START;

    private static int HOUSEHOLD_ID_END;

    private static MetricType METRIC_TYPE;

    private static long MESSAGE_COUNT;

    public static void main(String[] args) throws URISyntaxException {
        CommandLine cli = parseArgs(args);
        try {
            PUBLISH_RATE = Double.parseDouble(cli.getOptionValue(RATE_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 1 for publish rate, as could not read CLI input");
            PUBLISH_RATE = 1;
        }

        try {
            DAY_OFFSET = Integer.parseInt(cli.getOptionValue(DAY_OFFSET_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 0 for publish rate, as could not read CLI input");
            DAY_OFFSET = 0;
        }

        try {
            HOUSEHOLD_ID_START = Integer.parseInt(cli.getOptionValue(HOUSEHOLD_ID_START_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 0 for householdIdStart, as could not read CLI input");
            HOUSEHOLD_ID_START = 0;
        }

        try {
            HOUSEHOLD_ID_END = Integer.parseInt(cli.getOptionValue(HOUSEHOLD_ID_END_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 0 for householdIdEnd, as could not read CLI input");
            HOUSEHOLD_ID_END = 0;
        }

        try {
            METRIC_TYPE = MetricType.valueOf(cli.getOptionValue(METER_TYPE_OPTION).toUpperCase(Locale.ROOT));
        } catch (Exception e) {
            log.error("Defaulting to electricity for metric type, as could not read CLI input");
            METRIC_TYPE = MetricType.ELECTRICITY;
        }

        try {
            MESSAGE_COUNT = Long.parseLong(cli.getOptionValue(MESSAGE_COUNT_OPTION));
        } catch (Exception e) {
            log.warn("Did not find a default value for message count; setting to: " + Long.MAX_VALUE);
            MESSAGE_COUNT = Long.MAX_VALUE;
        }

        DatasetProcessor processor = getDatasetProcessor();
        MetricPublisher publisher = getMetricPublisher(processor);
        executeProducer(publisher);
    }

    public static MetricPublisher getMetricPublisher(DatasetProcessor processor) {
//        return new ConsolePublisher(MESSAGE_COUNT, PUBLISH_RATE, processor);
        return new KafkaPublisher(MESSAGE_COUNT, PUBLISH_RATE, processor, new Properties());
    }

    public static List<Integer> getHouseHoldIdList(int startingOffset, int endingOffset) {
        List<Integer> idList = new ArrayList<>(endingOffset - startingOffset + 1);
        for (int i = startingOffset; i <= endingOffset; i++) {
            idList.add(i);
        }
        return idList;
    }
    public static DatasetProcessor getDatasetProcessor() {
        List<Integer> householdIdList = getHouseHoldIdList(HOUSEHOLD_ID_START, HOUSEHOLD_ID_END);
        switch (METRIC_TYPE) {
            case ELECTRICITY:
                return new EdfProcessor(householdIdList);
            default:
                return new AMPds2Processor(householdIdList, METRIC_TYPE);
        }
    }

    public static DatasetReader getDatasetReader() {
        switch (METRIC_TYPE) {
            case ELECTRICITY:
                return new EdfReader(DAY_OFFSET);
            default:
                return new AMPds2Reader(DAY_OFFSET);
        }
    }

    public static String getFilePath() {
        switch (METRIC_TYPE) {
            case ELECTRICITY:
                return "dataset/edf/household_power_consumption.txt";
            case WATER:
                return "dataset/ampds2/Water_WHW.csv";
            case GAS:
            default:
                return "dataset/ampds2/NaturalGas_WHG.csv";
        }
    }

    public static CommandLine parseArgs(String[] args) {
        Options options = new Options();

        Option publishRate = new Option("r", RATE_OPTION, true, "Publishing rate");
        publishRate.setRequired(true);

        Option dayOffset = new Option("d", DAY_OFFSET_OPTION, true,
                "Day offset from first dataset day to start publishing");
        dayOffset.setRequired(true);

        Option householdIdStart = new Option("s", HOUSEHOLD_ID_START_OPTION, true,
                "Starting Id of the range of households to simulate");
        householdIdStart.setRequired(true);

        Option householdIdEnd = new Option("e", HOUSEHOLD_ID_END_OPTION, true,
                "Ending Id of the range of households to simulate");
        householdIdEnd.setRequired(true);

        Option meterType = new Option("t", METER_TYPE_OPTION, true,
                "Meter type: electricity, water or gas");
        meterType.setRequired(true);

        Option messageCount = new Option("c", MESSAGE_COUNT_OPTION, true,
                "How many messages should the publisher send before exiting");
        meterType.setRequired(true);

        options.addOption(publishRate);
        options.addOption(dayOffset);
        options.addOption(householdIdStart);
        options.addOption(householdIdEnd);
        options.addOption(meterType);
        options.addOption(messageCount);

        HelpFormatter formatter = new HelpFormatter();
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, args);
            return cmd;
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            formatter.printHelp("Need to specify all required options", options);
            System.exit(1);
        }
        return null;
    }
    public static void executeProducer(MetricPublisher metricPublisher) throws URISyntaxException {
        URI loc = ClassLoader.getSystemResource(getFilePath()).toURI();
        Path path = Paths.get(loc);

        try (Reader reader = Files.newBufferedReader(path)) {
            DatasetReader datasetReader = getDatasetReader();
            Iterator<DatasetMetric> iterator = datasetReader.readFile(reader);
            metricPublisher.publishMetrics(iterator);
        } catch (IOException e){
            log.error("Something went wrong with reading the dataset file");
        }
    }
}

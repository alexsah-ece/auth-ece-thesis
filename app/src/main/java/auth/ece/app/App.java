/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package auth.ece.app;

import auth.ece.app.consumer.ConsoleConsumer;
import auth.ece.app.model.DatasetMetric;
import auth.ece.app.processor.DatasetProcessor;
import auth.ece.app.processor.EdfProcessor;
import auth.ece.app.publisher.KafkaPublisher;
import auth.ece.app.publisher.MetricPublisher;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.cli.*;

import java.io.IOException;
import java.io.Reader;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.Properties;

@Log4j2
public class App {

    private static final String RATE_OPTION = "rate";
    private static final String DAY_OFFSET_OPTION = "dayOffset";

    private static final String HOUSEHOLD_ID_OPTION = "householdId";

    private static double PUBLISH_RATE = 1;
    private static int DAY_OFFSET = 0;

    private static int HOUSEHOLD_ID = 0;

    public static void main(String[] args) throws URISyntaxException {
        CommandLine cli = parseArgs(args);
        try {
            PUBLISH_RATE = Double.parseDouble(cli.getOptionValue(RATE_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 1 for publish rate, as could not read CLI input");
            PUBLISH_RATE = 1;
        }

        try {
            DAY_OFFSET = Integer.parseInt(cli.getOptionValue(DAY_OFFSET_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 0 for publish rate, as could not read CLI input");
            DAY_OFFSET = 0;
        }

        try {
            HOUSEHOLD_ID = Integer.parseInt(cli.getOptionValue(HOUSEHOLD_ID_OPTION));
        } catch (Exception e) {
            log.error("Defaulting to 0 for householdId, as could not read CLI input");
            HOUSEHOLD_ID = 0;
        }

        DatasetProcessor processor = getDatasetProcessor();
        MetricPublisher publisher = getMetricPublisher(processor);
        ConsoleConsumer consumer = new ConsoleConsumer();
        executeProducer(publisher);
//        executeConsumer(consumer);
    }

    public static MetricPublisher getMetricPublisher(DatasetProcessor processor) {
//        return new ConsolePublisher(PUBLISH_RATE, processor);
        return new KafkaPublisher(PUBLISH_RATE, processor, new Properties());
    }

    public static DatasetProcessor getDatasetProcessor() {
        return new EdfProcessor(HOUSEHOLD_ID);
    }

    public static CommandLine parseArgs(String[] args) {
        Options options = new Options();

        Option publishRate = new Option("r", "rate", true, "Publishing rate");
        publishRate.setRequired(true);

        Option dayOffset = new Option("d", "dayOffset", true,
                "Day offset from first dataset day to start publishing");
        dayOffset.setRequired(true);

        Option householdId = new Option("h", "householdId", true,
                "Id of the household to simulate");
        householdId.setRequired(true);

        options.addOption(publishRate);
        options.addOption(dayOffset);
        options.addOption(householdId);

        HelpFormatter formatter = new HelpFormatter();
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, args);
            return cmd;
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            formatter.printHelp("Need to specify all required options", options);
            System.exit(1);
        }
        return null;
    }
    public static void executeProducer(MetricPublisher metricPublisher) throws URISyntaxException {
        URI loc = ClassLoader.getSystemResource("dataset/edf/household_power_consumption.txt").toURI();
        Path path = Paths.get(loc);

        try (Reader reader = Files.newBufferedReader(path)) {
            NilmReader nilmReader = new NilmReader(DAY_OFFSET);
            Iterator<DatasetMetric> iterator = nilmReader.readFile(reader);
            metricPublisher.publishMetrics(iterator);
        } catch (IOException e){
            log.error("Something went wrong with reading the dataset file");
        }
    }

    public static void executeConsumer(ConsoleConsumer consumer) {
        consumer.consume("metrics");
    }
}
